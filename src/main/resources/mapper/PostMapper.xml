<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="book.project.bookbuddy.post.PostMapper">

    <select id="getNotLoginRecommend">
        SELECT * FROM RECOMMEND ORDER BY RECOMMEND_LIKE DESC LIMIT #{page},5
    </select>

    <select id="getNotLoginReview">
        SELECT * FROM REVIEW ORDER BY REVIEW_LIKE LIMIT #{page},5
    </select>

    <insert id="writeRecommendPost" parameterType="RecommendVO">
        INSERT INTO RECOMMEND (RECOMMEND_TITLE, RECOMMEND_CONTENT, RECOMMEND_CATEGORY, RECOMMEND_KEYWORD, USER_NO, RECOMMEND_BOOKTITLE)
        VALUES (#{recommend_TITLE}, #{recommend_CONTENT}, #{recommend_CATEGORY}, #{recommend_KEYWORD}, #{user_NO}, #{recommend_BOOKTITLE})
    </insert>

    <select id="getRecommendNo">
        SELECT RECOMMEND_NO FROM RECOMMEND WHERE USER_NO=#{userNo} ORDER BY RECOMMEND_TIME DESC LIMIT 1
    </select>

    <insert id="writeReviewPost" parameterType="ReviewVO">
        INSERT INTO REVIEW (REVIEW_TITLE, REVIEW_CONTENT, REVIEW_CATEGORY, REVIEW_KEYWORD, USER_NO, REVIEW_BOOKTITLE,REVIEW_RATING)
        VALUES (#{review_TITLE}, #{review_CONTENT}, #{review_CATEGORY}, #{review_KEYWORD}, #{user_NO}, #{review_BOOKTITLE},#{review_RATING})
    </insert>

    <select id="getReviewNo">
        SELECT REVIEW_NO FROM REVIEW WHERE USER_NO=#{userNo} ORDER BY REVIEW_TIME DESC LIMIT 1
    </select>

    <select id="getRcmPostMyPage">
        SELECT * FROM RECOMMEND WHERE USER_NO = (SELECT USER_NO FROM USER WHERE USER_ID = #{userId})
    </select>

    <select id="getRcmPostGrid">
        SELECT r.recommend_no, r.recommend_title,r.recommend_content,
        r.recommend_time,r.recommend_booktitle,f.file_no,f.file_url   
        FROM 
        RECOMMEND R LEFT JOIN FILE F 
        ON R.RECOMMEND_NO = F.RECOMMEND_NO 
        WHERE R.USER_NO = (SELECT USER_NO FROM USER WHERE USER_ID = #{userId}) AND 
        FILE_NO = (SELECT FILE_NO FROM FILE WHERE RECOMMEND_NO=R.RECOMMEND_NO ORDER BY FILE_DATE LIMIT 1)
        ORDER BY R.RECOMMEND_TIME DESC
    </select>

    <select id="getRvPostMyPage">
        SELECT * FROM REVIEW WHERE USER_NO = (SELECT USER_NO FROM USER WHERE USER_ID = #{userId})
    </select>

    <select id="getRvPostGrid">
        SELECT r.review_no, r.review_title,r.review_content,
        r.review_time,r.review_booktitle,f.file_no,f.file_url   
        FROM 
        REVIEW R LEFT JOIN FILE F 
        ON R.REVIEW_NO = F.REVIEW_NO 
        WHERE R.USER_NO = (SELECT USER_NO FROM USER WHERE USER_ID = #{userId}) AND 
        FILE_NO = (SELECT FILE_NO FROM FILE WHERE REVIEW_NO=R.REVIEW_NO ORDER BY FILE_DATE LIMIT 1)
        ORDER BY R.REVIEW_TIME DESC
    </select>

    <select id="getMyPageList">
        SELECT ${type}_TITLE, ${type}_BOOKTITLE, ${type}_NO,${type}_TIME,${type}_CONTENT,
            (SELECT COUNT(LIKE_NO) FROM likes WHERE likes.LIKE_POSTNO = ${type}.${type}_NO AND LIKE_TYPE = '${type}') AS likeCnt,
            (SELECT COUNT(COMMENT_NO) FROM comment WHERE comment.${type}_NO = ${type}.${type}_NO) AS cmtCnt,
            (SELECT FILE_URL FROM file WHERE file.${type}_NO = ${type}.${type}_NO ORDER BY FILE_DATE LIMIT 1) AS fileUrl
        FROM ${type}
        WHERE USER_NO = (SELECT USER_NO FROM USER WHERE USER_ID = '${userId}')
        ORDER BY ${type}_TIME DESC;
    </select>

    <select id="getPostRecommend">
        SELECT *,
        (SELECT GROUP_CONCAT(C.CATEGORY_NAME) AS RECOMMEND_CATEGORY2 FROM CATEGORY C WHERE EXISTS (SELECT 1 FROM RECOMMEND WHERE RECOMMEND_NO = ${postNo} AND INSTR(RECOMMEND_CATEGORY, C.CATEGORY_NO) > 0)) AS RECOMMEND_CATEGORY2,
        (SELECT GROUP_CONCAT(K.KEYWORD_NAME) AS RECOMMEND_KEYWORD2 FROM KEYWORD K WHERE EXISTS (SELECT 1 FROM RECOMMEND WHERE RECOMMEND_NO = ${postNo} AND INSTR(RECOMMEND_KEYWORD, K.KEYWORD_NO) > 0)) AS RECOMMEND_KEYWORD2
        FROM RECOMMEND WHERE RECOMMEND_NO=${postNo};
    </select>

    <select id="getPostReview"> 
        SELECT * FROM REVIEW WHERE REVIEW_NO=${postNo}
    </select>

    <select id="getCnt">
        SELECT (SELECT COUNT(*) FROM LIKES WHERE LIKE_POSTNO = ${postNo} AND LIKE_TYPE='${type}') AS likeCnt,
        (SELECT COUNT(*) FROM COMMENT WHERE ${type}_NO=${postNo} ) AS cmtCnt
    </select>

    <select id="getLikeList">
        SELECT * FROM LIKES WHERE LIKE_POSTNO = ${postNo} AND LIKE_TYPE='${type}'
    </select>

    <select id="getCmtList">
        SELECT * FROM COMMENT WHERE ${type}_NO=${postNo}
    </select>

</mapper>