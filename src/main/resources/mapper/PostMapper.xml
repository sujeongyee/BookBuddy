<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="book.project.bookbuddy.post.PostMapper">

    <select id="getNotLoginRecommend">
        SELECT * FROM RECOMMEND ORDER BY RECOMMEND_LIKE DESC LIMIT #{page},5
    </select>

    <select id="getNotLoginReview">
        SELECT * FROM REVIEW ORDER BY REVIEW_LIKE LIMIT #{page},5
    </select>

    <insert id="writeRecommendPost" parameterType="RecommendVO">
        INSERT INTO RECOMMEND (RECOMMEND_TITLE, RECOMMEND_CONTENT, RECOMMEND_CATEGORY, RECOMMEND_KEYWORD, USER_NO, RECOMMEND_BOOKTITLE, BOOK_ISBN, BOOK_THUMBNAIL)
        VALUES (#{recommend_TITLE}, #{recommend_CONTENT}, #{recommend_CATEGORY}, #{recommend_KEYWORD}, #{user_NO}, #{recommend_BOOKTITLE},#{book_ISBN},#{book_THUMBNAIL})
    </insert>

    <select id="getRecommendNo">
        SELECT RECOMMEND_NO FROM RECOMMEND WHERE USER_NO=#{userNo} ORDER BY RECOMMEND_TIME DESC LIMIT 1
    </select>

    <insert id="writeReviewPost" parameterType="ReviewVO">
        INSERT INTO REVIEW (REVIEW_TITLE, REVIEW_CONTENT, REVIEW_CATEGORY, REVIEW_KEYWORD, USER_NO, REVIEW_BOOKTITLE,REVIEW_RATING,BOOK_ISBN, BOOK_THUMBNAIL)
        VALUES (#{review_TITLE}, #{review_CONTENT}, #{review_CATEGORY}, #{review_KEYWORD}, #{user_NO}, #{review_BOOKTITLE},#{review_RATING},#{book_ISBN},#{book_THUMBNAIL})
    </insert>

    <select id="getReviewNo">
        SELECT REVIEW_NO FROM REVIEW WHERE USER_NO=#{userNo} ORDER BY REVIEW_TIME DESC LIMIT 1
    </select>

    <select id="getRcmPostMyPage">
        SELECT * FROM RECOMMEND WHERE USER_NO = (SELECT USER_NO FROM USER WHERE USER_ID = #{userId})
    </select>

    <select id="getRcmPostGrid">
        SELECT 
            r.recommend_no, 
            r.recommend_title,
            r.recommend_content,
            r.recommend_time,
            r.recommend_booktitle,
            r.book_thumbnail,
            COALESCE(f.file_no, '') as file_no,
            COALESCE(f.file_url, '') as file_url
        FROM
            RECOMMEND r
        LEFT JOIN
            FILE f ON r.RECOMMEND_NO = f.RECOMMEND_NO
            AND f.file_no = (SELECT MIN(file_no) FROM FILE WHERE RECOMMEND_NO = r.RECOMMEND_NO)
        WHERE
            r.USER_NO = (SELECT USER_NO FROM USER WHERE USER_ID = #{userId})
        ORDER BY r.RECOMMEND_TIME DESC
    </select>

    <select id="getRvPostMyPage">
        SELECT * FROM REVIEW WHERE USER_NO = (SELECT USER_NO FROM USER WHERE USER_ID = #{userId})
    </select>

    <select id="getRvPostGrid">
        SELECT 
            r.review_no, 
            r.review_title,
            r.review_content,
            r.review_time,
            r.review_booktitle,
            r.book_thumbnail,
            COALESCE(f.file_no, '') as file_no,
            COALESCE(f.file_url, '') as file_url
        FROM
            REVIEW r
        LEFT JOIN
            FILE f ON r.review_NO = f.review_NO
            AND f.file_no = (SELECT MIN(file_no) FROM FILE WHERE REVIEW_NO = r.REVIEW_NO)
        WHERE
            r.USER_NO = (SELECT USER_NO FROM USER WHERE USER_ID = #{userId})
        ORDER BY r.REVIEW_TIME DESC
        
    </select>

    <select id="getMyPageList">
        SELECT ${type}_TITLE, ${type}_BOOKTITLE, ${type}_NO,${type}_TIME,${type}_CONTENT,book_thumbnail,
            (SELECT COUNT(LIKE_NO) FROM likes WHERE likes.LIKE_POSTNO = ${type}.${type}_NO AND LIKE_TYPE = '${type}') AS likeCnt,
            (SELECT COUNT(COMMENT_NO) FROM comment WHERE comment.${type}_NO = ${type}.${type}_NO) AS cmtCnt,
            (SELECT FILE_URL FROM file WHERE file.${type}_NO = ${type}.${type}_NO ORDER BY FILE_DATE LIMIT 1) AS fileUrl
        FROM ${type}
        WHERE USER_NO = (SELECT USER_NO FROM USER WHERE USER_ID = '${userId}')
        ORDER BY ${type}_TIME DESC;
    </select>

    <select id="getPostRecommend">
        SELECT *,
        (SELECT GROUP_CONCAT(C.CATEGORY_NAME) AS RECOMMEND_CATEGORY2 FROM CATEGORY C WHERE EXISTS (SELECT 1 FROM RECOMMEND WHERE RECOMMEND_NO = ${postNo} AND INSTR(RECOMMEND_CATEGORY, C.CATEGORY_NO) > 0)) AS RECOMMEND_CATEGORY2,
        (SELECT GROUP_CONCAT(K.KEYWORD_NAME) AS RECOMMEND_KEYWORD2 FROM KEYWORD K WHERE EXISTS (SELECT 1 FROM RECOMMEND WHERE RECOMMEND_NO = ${postNo} AND INSTR(RECOMMEND_KEYWORD, K.KEYWORD_NO) > 0)) AS RECOMMEND_KEYWORD2
        FROM RECOMMEND WHERE RECOMMEND_NO=${postNo};
    </select>

    <select id="getPostReview">
        SELECT *,
        (SELECT GROUP_CONCAT(C.CATEGORY_NAME) AS REVIEW_CATEGORY2 FROM CATEGORY C WHERE EXISTS (SELECT 1 FROM REVIEW WHERE REVIEW_NO = ${postNo} AND INSTR(REVIEW_CATEGORY, C.CATEGORY_NO) > 0)) AS REVIEW_CATEGORY2,
        (SELECT GROUP_CONCAT(K.KEYWORD_NAME) AS REVIEW_KEYWORD2 FROM KEYWORD K WHERE EXISTS (SELECT 1 FROM REVIEW WHERE REVIEW_NO = ${postNo} AND INSTR(REVIEW_KEYWORD, K.KEYWORD_NO) > 0)) AS REVIEW_KEYWORD2
        FROM REVIEW WHERE REVIEW_NO=${postNo};
    </select>

    <select id="likeCheck">
        SELECT COUNT(*) FROM LIKES WHERE LIKE_TYPE='${type}' AND LIKE_POSTNO = ${postNo} AND LIKE_USER=${userNo}
    </select>

    <select id="getCnt">
        SELECT (SELECT COUNT(*) FROM LIKES WHERE LIKE_POSTNO = ${postNo} AND LIKE_TYPE='${type}') AS likeCnt,
        (SELECT COUNT(*) FROM COMMENT WHERE ${type}_NO=${postNo} ) AS cmtCnt
    </select>

    <select id="getLikeList">
        SELECT * FROM LIKES WHERE LIKE_POSTNO = ${postNo} AND LIKE_TYPE='${type}'
    </select>

    <select id="getCmtList">
        SELECT C.*,U.PROFILE_URL AS PROFILE_URL,U.USER_NICK AS USER_NICK,U.USER_ID AS USER_ID FROM COMMENT C LEFT JOIN USER U ON C.USER_NO = U.USER_NO WHERE C.${type}_NO=${postNo}
    </select>

    <insert id="doLike">
        INSERT INTO LIKES (LIKE_TYPE,LIKE_POSTNO,LIKE_USER) VALUES ('${type}',${postNo},${userNo})
    </insert>

    <update id="upLike">
        UPDATE ${type} SET ${type}_LIKE = ${type}_LIKE+1 WHERE ${type}_NO = ${postNo}
    </update>
    
    <delete id="cancelLike">
        DELETE FROM LIKES WHERE LIKE_TYPE='${type}' AND LIKE_POSTNO = ${postNo} AND LIKE_USER=${userNo}
    </delete>

    <update id="downLike">
        UPDATE ${type} SET ${type}_LIKE = ${type}_LIKE-1 WHERE ${type}_NO = ${postNo}
    </update>

    <insert id="comment">
        INSERT INTO COMMENT (COMMENT_CONTENT,USER_NO,${type}_NO)
        VALUES ('${comment}',${userNo},${postNo})
    </insert>
    
    <select id="getCmtVO">
        SELECT C.*,U.PROFILE_URL AS PROFILE_URL,U.USER_NICK AS USER_NICK,U.USER_ID AS USER_ID FROM COMMENT C LEFT JOIN USER U ON C.USER_NO = U.USER_NO ORDER BY C.COMMENT_DATE DESC LIMIT 1
    </select>

    <update id="modifyRecommendPost">
        UPDATE RECOMMEND SET 
        RECOMMEND_TITLE = #{recommend_TITLE},
        RECOMMEND_CONTENT = #{recommend_CONTENT},
        RECOMMEND_CATEGORY = #{recommend_CATEGORY},
        RECOMMEND_KEYWORD = #{recommend_KEYWORD},
        RECOMMEND_BOOKTITLE = #{recommend_BOOKTITLE},
        BOOK_ISBN = #{book_ISBN},
        BOOK_THUMBNAIL = #{book_THUMBNAIL}
        WHERE RECOMMEND_NO = #{recommend_NO}
    </update>

    <update id="modifyReviewPost">
        UPDATE REVIEW SET
        REVIEW_TITLE = #{review_TITLE},
        REVIEW_CONTENT = #{review_CONTENT},
        REVIEW_CATEGORY = #{review_CATEGORY},
        REVIEW_KEYWORD = #{review_KEYWORD},
        REVIEW_BOOKTITLE = #{review_BOOKTITLE},
        REVIEW_RATING = #{review_RATING},
        BOOK_ISBN = #{book_ISBN},
        BOOK_THUMBNAIL = #{book_THUMBNAIL}
        WHERE REVIEW_NO = #{review_NO}
    </update>

    <delete id="deletePostComment">
        DELETE FROM COMMENT WHERE ${type}_NO = #{postNo}
    </delete>

    <delete id="deletePost">
        DELETE FROM ${type} WHERE ${type}_NO = #{postNo}
    </delete>

    <update id="modifyComment">
        UPDATE COMMENT SET COMMENT_CONTENT=#{editContent} WHERE COMMENT_NO = #{commentNo}
    </update>

    <delete id="deleteComment">
        DELETE FROM COMMENT WHERE COMMENT_NO = #{commentNo}
    </delete>

</mapper>